{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 305,
   "id": "ec263f3e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import datetime\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "id": "d68361a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question 1\n",
    "\"\"\"I first imported the data from csv\"\"\"\n",
    "prepro_energy_data = pd.read_csv('energy_data.csv')\n",
    "prepro_weather_data = pd.read_csv('weather_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "id": "d74573ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"Split the Date & Time column and merge the rows that have the same date\"\"\"\n",
    "prepro_energy_data['Date & Time'] = pd.to_datetime(prepro_energy_data['Date & Time'])\n",
    "prepro_energy_data['new_time'] = [d.time() for d in prepro_energy_data['Date & Time']]\n",
    "prepro_energy_data['Date_Time'] = [d.date() for d in prepro_energy_data['Date & Time']]\n",
    "energy = prepro_energy_data.groupby(by=\"Date_Time\").sum()\n",
    "energy.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "id": "e1be43de",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"Merge the rows that have the same date\"\"\"\n",
    "weather = prepro_weather_data.groupby(prepro_weather_data.index // 24).mean()\n",
    "prepro_weather_data['time'] = pd.to_datetime(prepro_weather_data['time'], unit='s')\n",
    "prepro_weather_data['new_time'] = [d.time() for d in prepro_weather_data['time']]\n",
    "prepro_weather_data['Date'] = [d.date() for d in prepro_weather_data['time']]\n",
    "weather_new = prepro_weather_data.groupby(by=\"Date\").mean()\n",
    "weather_new.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "id": "41fb45d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date_Time</th>\n",
       "      <th>use_kW_</th>\n",
       "      <th>temperature</th>\n",
       "      <th>humidity</th>\n",
       "      <th>visibility</th>\n",
       "      <th>pressure</th>\n",
       "      <th>windSpeed</th>\n",
       "      <th>cloudCover</th>\n",
       "      <th>windBearing</th>\n",
       "      <th>precipIntensity</th>\n",
       "      <th>dewPoint</th>\n",
       "      <th>precipProbability</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2014-01-01</td>\n",
       "      <td>65.013592</td>\n",
       "      <td>20.110833</td>\n",
       "      <td>0.556667</td>\n",
       "      <td>9.970000</td>\n",
       "      <td>1025.395000</td>\n",
       "      <td>6.820417</td>\n",
       "      <td>0.031304</td>\n",
       "      <td>252.291667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.362083</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2014-01-02</td>\n",
       "      <td>32.305336</td>\n",
       "      <td>16.382500</td>\n",
       "      <td>0.784583</td>\n",
       "      <td>3.834583</td>\n",
       "      <td>1023.465833</td>\n",
       "      <td>7.433750</td>\n",
       "      <td>0.354444</td>\n",
       "      <td>53.458333</td>\n",
       "      <td>0.002004</td>\n",
       "      <td>10.737083</td>\n",
       "      <td>0.074583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2014-01-03</td>\n",
       "      <td>31.164468</td>\n",
       "      <td>6.256667</td>\n",
       "      <td>0.680833</td>\n",
       "      <td>4.509167</td>\n",
       "      <td>1014.428750</td>\n",
       "      <td>12.828333</td>\n",
       "      <td>0.186364</td>\n",
       "      <td>207.333333</td>\n",
       "      <td>0.002029</td>\n",
       "      <td>-2.337500</td>\n",
       "      <td>0.080000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2014-01-04</td>\n",
       "      <td>45.287782</td>\n",
       "      <td>2.711667</td>\n",
       "      <td>0.617083</td>\n",
       "      <td>9.822917</td>\n",
       "      <td>1030.096250</td>\n",
       "      <td>5.248333</td>\n",
       "      <td>0.001667</td>\n",
       "      <td>240.166667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-8.352083</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2014-01-05</td>\n",
       "      <td>36.316643</td>\n",
       "      <td>17.654167</td>\n",
       "      <td>0.682083</td>\n",
       "      <td>9.134583</td>\n",
       "      <td>1025.275000</td>\n",
       "      <td>3.417083</td>\n",
       "      <td>0.010952</td>\n",
       "      <td>208.958333</td>\n",
       "      <td>0.000033</td>\n",
       "      <td>8.615000</td>\n",
       "      <td>0.000417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>360</th>\n",
       "      <td>2014-12-27</td>\n",
       "      <td>35.046127</td>\n",
       "      <td>35.487083</td>\n",
       "      <td>0.756250</td>\n",
       "      <td>9.246250</td>\n",
       "      <td>1022.081667</td>\n",
       "      <td>3.677083</td>\n",
       "      <td>0.030417</td>\n",
       "      <td>243.791667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>27.992500</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>361</th>\n",
       "      <td>2014-12-28</td>\n",
       "      <td>37.695824</td>\n",
       "      <td>41.892917</td>\n",
       "      <td>0.763750</td>\n",
       "      <td>9.332917</td>\n",
       "      <td>1013.549167</td>\n",
       "      <td>6.587917</td>\n",
       "      <td>0.245909</td>\n",
       "      <td>224.458333</td>\n",
       "      <td>0.003996</td>\n",
       "      <td>34.876250</td>\n",
       "      <td>0.137917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>362</th>\n",
       "      <td>2014-12-29</td>\n",
       "      <td>28.675929</td>\n",
       "      <td>34.728333</td>\n",
       "      <td>0.592083</td>\n",
       "      <td>9.997083</td>\n",
       "      <td>1018.870833</td>\n",
       "      <td>8.129583</td>\n",
       "      <td>0.119167</td>\n",
       "      <td>281.833333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>21.570000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>363</th>\n",
       "      <td>2014-12-30</td>\n",
       "      <td>31.514313</td>\n",
       "      <td>24.846667</td>\n",
       "      <td>0.488750</td>\n",
       "      <td>9.998333</td>\n",
       "      <td>1026.102083</td>\n",
       "      <td>7.566667</td>\n",
       "      <td>0.031250</td>\n",
       "      <td>312.041667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.772083</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>364</th>\n",
       "      <td>2014-12-31</td>\n",
       "      <td>28.674498</td>\n",
       "      <td>19.522917</td>\n",
       "      <td>0.552917</td>\n",
       "      <td>9.986250</td>\n",
       "      <td>1025.940833</td>\n",
       "      <td>5.943750</td>\n",
       "      <td>0.117917</td>\n",
       "      <td>260.083333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.332500</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>365 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Date_Time    use_kW_  temperature  humidity  visibility     pressure  \\\n",
       "0    2014-01-01  65.013592    20.110833  0.556667    9.970000  1025.395000   \n",
       "1    2014-01-02  32.305336    16.382500  0.784583    3.834583  1023.465833   \n",
       "2    2014-01-03  31.164468     6.256667  0.680833    4.509167  1014.428750   \n",
       "3    2014-01-04  45.287782     2.711667  0.617083    9.822917  1030.096250   \n",
       "4    2014-01-05  36.316643    17.654167  0.682083    9.134583  1025.275000   \n",
       "..          ...        ...          ...       ...         ...          ...   \n",
       "360  2014-12-27  35.046127    35.487083  0.756250    9.246250  1022.081667   \n",
       "361  2014-12-28  37.695824    41.892917  0.763750    9.332917  1013.549167   \n",
       "362  2014-12-29  28.675929    34.728333  0.592083    9.997083  1018.870833   \n",
       "363  2014-12-30  31.514313    24.846667  0.488750    9.998333  1026.102083   \n",
       "364  2014-12-31  28.674498    19.522917  0.552917    9.986250  1025.940833   \n",
       "\n",
       "     windSpeed  cloudCover  windBearing  precipIntensity   dewPoint  \\\n",
       "0     6.820417    0.031304   252.291667         0.000000   6.362083   \n",
       "1     7.433750    0.354444    53.458333         0.002004  10.737083   \n",
       "2    12.828333    0.186364   207.333333         0.002029  -2.337500   \n",
       "3     5.248333    0.001667   240.166667         0.000000  -8.352083   \n",
       "4     3.417083    0.010952   208.958333         0.000033   8.615000   \n",
       "..         ...         ...          ...              ...        ...   \n",
       "360   3.677083    0.030417   243.791667         0.000000  27.992500   \n",
       "361   6.587917    0.245909   224.458333         0.003996  34.876250   \n",
       "362   8.129583    0.119167   281.833333         0.000000  21.570000   \n",
       "363   7.566667    0.031250   312.041667         0.000000   7.772083   \n",
       "364   5.943750    0.117917   260.083333         0.000000   5.332500   \n",
       "\n",
       "     precipProbability  \n",
       "0             0.000000  \n",
       "1             0.074583  \n",
       "2             0.080000  \n",
       "3             0.000000  \n",
       "4             0.000417  \n",
       "..                 ...  \n",
       "360           0.000000  \n",
       "361           0.137917  \n",
       "362           0.000000  \n",
       "363           0.000000  \n",
       "364           0.000000  \n",
       "\n",
       "[365 rows x 12 columns]"
      ]
     },
     "execution_count": 321,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"Merge energy and weather dataset\"\"\"\n",
    "sub_energy = energy[[\"Date_Time\", \"use [kW]\"]]\n",
    "sub_energy.columns = [\"Date_Time\", \"use_kW_\"]\n",
    "\n",
    "result = pd.concat([sub_energy, weather_new], axis=1, join=\"inner\")\n",
    "merged_data = result.drop(['Date'], axis=1)\n",
    "merged_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "id": "dd72ef65",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date_Time</th>\n",
       "      <th>use_kW_</th>\n",
       "      <th>temperature</th>\n",
       "      <th>humidity</th>\n",
       "      <th>visibility</th>\n",
       "      <th>pressure</th>\n",
       "      <th>windSpeed</th>\n",
       "      <th>cloudCover</th>\n",
       "      <th>windBearing</th>\n",
       "      <th>precipIntensity</th>\n",
       "      <th>dewPoint</th>\n",
       "      <th>precipProbability</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2014-01-01</td>\n",
       "      <td>65.013592</td>\n",
       "      <td>20.110833</td>\n",
       "      <td>0.556667</td>\n",
       "      <td>9.970000</td>\n",
       "      <td>1025.395000</td>\n",
       "      <td>6.820417</td>\n",
       "      <td>0.031304</td>\n",
       "      <td>252.291667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.362083</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2014-01-02</td>\n",
       "      <td>32.305336</td>\n",
       "      <td>16.382500</td>\n",
       "      <td>0.784583</td>\n",
       "      <td>3.834583</td>\n",
       "      <td>1023.465833</td>\n",
       "      <td>7.433750</td>\n",
       "      <td>0.354444</td>\n",
       "      <td>53.458333</td>\n",
       "      <td>0.002004</td>\n",
       "      <td>10.737083</td>\n",
       "      <td>0.074583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2014-01-03</td>\n",
       "      <td>31.164468</td>\n",
       "      <td>6.256667</td>\n",
       "      <td>0.680833</td>\n",
       "      <td>4.509167</td>\n",
       "      <td>1014.428750</td>\n",
       "      <td>12.828333</td>\n",
       "      <td>0.186364</td>\n",
       "      <td>207.333333</td>\n",
       "      <td>0.002029</td>\n",
       "      <td>-2.337500</td>\n",
       "      <td>0.080000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2014-01-04</td>\n",
       "      <td>45.287782</td>\n",
       "      <td>2.711667</td>\n",
       "      <td>0.617083</td>\n",
       "      <td>9.822917</td>\n",
       "      <td>1030.096250</td>\n",
       "      <td>5.248333</td>\n",
       "      <td>0.001667</td>\n",
       "      <td>240.166667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-8.352083</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2014-01-05</td>\n",
       "      <td>36.316643</td>\n",
       "      <td>17.654167</td>\n",
       "      <td>0.682083</td>\n",
       "      <td>9.134583</td>\n",
       "      <td>1025.275000</td>\n",
       "      <td>3.417083</td>\n",
       "      <td>0.010952</td>\n",
       "      <td>208.958333</td>\n",
       "      <td>0.000033</td>\n",
       "      <td>8.615000</td>\n",
       "      <td>0.000417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>329</th>\n",
       "      <td>2014-11-26</td>\n",
       "      <td>27.712850</td>\n",
       "      <td>36.385000</td>\n",
       "      <td>0.778333</td>\n",
       "      <td>6.551667</td>\n",
       "      <td>1019.266250</td>\n",
       "      <td>6.445833</td>\n",
       "      <td>0.171333</td>\n",
       "      <td>185.375000</td>\n",
       "      <td>0.024837</td>\n",
       "      <td>29.875417</td>\n",
       "      <td>0.291250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>330</th>\n",
       "      <td>2014-11-27</td>\n",
       "      <td>30.114004</td>\n",
       "      <td>31.992500</td>\n",
       "      <td>0.847083</td>\n",
       "      <td>7.394583</td>\n",
       "      <td>1012.272917</td>\n",
       "      <td>7.599167</td>\n",
       "      <td>0.420769</td>\n",
       "      <td>316.833333</td>\n",
       "      <td>0.006033</td>\n",
       "      <td>27.862083</td>\n",
       "      <td>0.160417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>331</th>\n",
       "      <td>2014-11-28</td>\n",
       "      <td>26.348404</td>\n",
       "      <td>29.126250</td>\n",
       "      <td>0.763750</td>\n",
       "      <td>8.919167</td>\n",
       "      <td>1018.359583</td>\n",
       "      <td>6.599167</td>\n",
       "      <td>0.268947</td>\n",
       "      <td>316.416667</td>\n",
       "      <td>0.000271</td>\n",
       "      <td>22.335000</td>\n",
       "      <td>0.006667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>332</th>\n",
       "      <td>2014-11-29</td>\n",
       "      <td>20.241298</td>\n",
       "      <td>22.344583</td>\n",
       "      <td>0.706667</td>\n",
       "      <td>9.793750</td>\n",
       "      <td>1025.543750</td>\n",
       "      <td>4.299167</td>\n",
       "      <td>0.049167</td>\n",
       "      <td>230.375000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13.982083</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>333</th>\n",
       "      <td>2014-11-30</td>\n",
       "      <td>32.239043</td>\n",
       "      <td>36.430000</td>\n",
       "      <td>0.730000</td>\n",
       "      <td>9.826250</td>\n",
       "      <td>1021.495000</td>\n",
       "      <td>5.782917</td>\n",
       "      <td>0.202667</td>\n",
       "      <td>185.750000</td>\n",
       "      <td>0.000225</td>\n",
       "      <td>28.567083</td>\n",
       "      <td>0.005833</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>334 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Date_Time    use_kW_  temperature  humidity  visibility     pressure  \\\n",
       "0    2014-01-01  65.013592    20.110833  0.556667    9.970000  1025.395000   \n",
       "1    2014-01-02  32.305336    16.382500  0.784583    3.834583  1023.465833   \n",
       "2    2014-01-03  31.164468     6.256667  0.680833    4.509167  1014.428750   \n",
       "3    2014-01-04  45.287782     2.711667  0.617083    9.822917  1030.096250   \n",
       "4    2014-01-05  36.316643    17.654167  0.682083    9.134583  1025.275000   \n",
       "..          ...        ...          ...       ...         ...          ...   \n",
       "329  2014-11-26  27.712850    36.385000  0.778333    6.551667  1019.266250   \n",
       "330  2014-11-27  30.114004    31.992500  0.847083    7.394583  1012.272917   \n",
       "331  2014-11-28  26.348404    29.126250  0.763750    8.919167  1018.359583   \n",
       "332  2014-11-29  20.241298    22.344583  0.706667    9.793750  1025.543750   \n",
       "333  2014-11-30  32.239043    36.430000  0.730000    9.826250  1021.495000   \n",
       "\n",
       "     windSpeed  cloudCover  windBearing  precipIntensity   dewPoint  \\\n",
       "0     6.820417    0.031304   252.291667         0.000000   6.362083   \n",
       "1     7.433750    0.354444    53.458333         0.002004  10.737083   \n",
       "2    12.828333    0.186364   207.333333         0.002029  -2.337500   \n",
       "3     5.248333    0.001667   240.166667         0.000000  -8.352083   \n",
       "4     3.417083    0.010952   208.958333         0.000033   8.615000   \n",
       "..         ...         ...          ...              ...        ...   \n",
       "329   6.445833    0.171333   185.375000         0.024837  29.875417   \n",
       "330   7.599167    0.420769   316.833333         0.006033  27.862083   \n",
       "331   6.599167    0.268947   316.416667         0.000271  22.335000   \n",
       "332   4.299167    0.049167   230.375000         0.000000  13.982083   \n",
       "333   5.782917    0.202667   185.750000         0.000225  28.567083   \n",
       "\n",
       "     precipProbability  \n",
       "0             0.000000  \n",
       "1             0.074583  \n",
       "2             0.080000  \n",
       "3             0.000000  \n",
       "4             0.000417  \n",
       "..                 ...  \n",
       "329           0.291250  \n",
       "330           0.160417  \n",
       "331           0.006667  \n",
       "332           0.000000  \n",
       "333           0.005833  \n",
       "\n",
       "[334 rows x 12 columns]"
      ]
     },
     "execution_count": 322,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Question 2\n",
    "\"\"\"Split the data into training and testing set, testing includes December and training the rest\"\"\"\n",
    "split_date = datetime.date(2014,12,1)\n",
    "training_set = merged_data.loc[merged_data['Date_Time'] < split_date]\n",
    "testing_set = merged_data.loc[merged_data['Date_Time'] >= split_date]\n",
    "training_set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "id": "6bc25e7a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question 3\n",
    "\"\"\"Made a linear model using training set\"\"\"\n",
    "x = training_set[[\"temperature\", \"humidity\", \"visibility\", \"pressure\", \"windSpeed\", \"cloudCover\", \"windBearing\", \"precipIntensity\", \"dewPoint\", \"precipProbability\"]]\n",
    "x = x.values\n",
    "y = training_set.use_kW_.values\n",
    "y = y.reshape(length, 1)\n",
    "linear = LinearRegression().fit(x, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "id": "9a4e62fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"Made a prediction using model and test data\"\"\"\n",
    "test = testing_set[[\"temperature\", \"humidity\", \"visibility\", \"pressure\", \"windSpeed\", \"cloudCover\", \"windBearing\", \"precipIntensity\", \"dewPoint\", \"precipProbability\"]]\n",
    "test_predicts = linear.predict(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "id": "ae422d6d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8.740566311137641"
      ]
     },
     "execution_count": 314,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"Calculated the root mean squared error\"\"\"\n",
    "MSE = mean_squared_error(y_true = testing_set.use_kW_.values, y_pred = test_predicts)\n",
    "MSE**(0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "id": "66f58b3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"Exported the predictions as csv\"\"\"\n",
    "date = testing_set.Date_Time.values\n",
    "df = pd.DataFrame(date, \n",
    "             columns=['Date_Time'])\n",
    "df[\"Predicted_value\"] = test_predicts\n",
    "df.to_csv(\"cse351_hw2_yarma_seniha_111732218_linear_regression.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "id": "908af5ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question 4\n",
    "\"\"\"Made a training and testing data\"\"\"\n",
    "training = training_set[[\"Date_Time\", \"humidity\", \"visibility\", \"pressure\", \"windSpeed\", \"cloudCover\", \"windBearing\", \"precipIntensity\", \"dewPoint\", \"precipProbability\"]]\n",
    "training.insert(1, \"Temperature\", training_set[\"temperature\"].apply(lambda x: 0 if x<35 else 1), True)\n",
    "testing =  testing_set[[\"Date_Time\", \"humidity\", \"visibility\", \"pressure\", \"windSpeed\", \"cloudCover\", \"windBearing\", \"precipIntensity\", \"dewPoint\", \"precipProbability\"]]\n",
    "testing.insert(1, \"Temperature\", testing_set[\"temperature\"].apply(lambda x: 0 if x<35 else 1), True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "id": "bdbda3ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6486486486486487"
      ]
     },
     "execution_count": 317,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"Made a logistic model using training data, prediction using testing data, and then calculated the F1 score\"\"\"\n",
    "x = training[[\"humidity\", \"visibility\", \"pressure\", \"windSpeed\", \"cloudCover\", \"windBearing\", \"precipIntensity\", \"dewPoint\", \"precipProbability\"]]\n",
    "y = training.Temperature.values\n",
    "logistic = LogisticRegression(solver='lbfgs', max_iter=1000)\n",
    "logistic.fit(x, y)\n",
    "\n",
    "test = testing[[\"humidity\", \"visibility\", \"pressure\", \"windSpeed\", \"cloudCover\", \"windBearing\", \"precipIntensity\", \"dewPoint\", \"precipProbability\"]]\n",
    "logistic_pred = logistic.predict(test)\n",
    "logistic_pred\n",
    "\n",
    "fScore = f1_score(testing.Temperature.values, logistic_pred)\n",
    "fScore"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "id": "ca94d0ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"Exported the predictions as csv\"\"\"\n",
    "date = testing.Date_Time.values\n",
    "df = pd.DataFrame(date, \n",
    "             columns=['Date_Time'])\n",
    "df[\"Predicted_value\"] = logistic_pred\n",
    "df.to_csv(\"cse351_hw2_yarma_seniha_111732218_logistic_regression.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "id": "12876f2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question 5\n",
    "\"\"\"Divided the datasets into day and night, then created day, month and year column \n",
    "to show the difference between day and night more clearly. Showed result month by month\"\"\"\n",
    "mask = (pd.to_timedelta(prepro_energy_data['new_time'].astype(str))\n",
    "          .between(pd.Timedelta('06:00:00'), pd.Timedelta('18:30:00')))\n",
    "day = prepro_energy_data[mask]\n",
    "day = day.groupby(by=\"Date_Time\").sum()\n",
    "day.reset_index(inplace=True)\n",
    "day[\"Date_Time\"] = pd.to_datetime(day.Date_Time, format='%Y-%m-%d')\n",
    "day['day'] = day['Date_Time'].dt.day\n",
    "day['month'] = day['Date_Time'].dt.month\n",
    "day['year'] = day['Date_Time'].dt.year\n",
    "day = day.groupby(by=\"month\").sum()\n",
    "day.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "id": "fa51f710",
   "metadata": {},
   "outputs": [],
   "source": [
    "night = prepro_energy_data[~mask]\n",
    "night = night.groupby(by=\"Date_Time\").sum()\n",
    "night.reset_index(inplace=True)\n",
    "night[\"Date_Time\"] = pd.to_datetime(night.Date_Time, format='%Y-%m-%d')\n",
    "night['day'] = night['Date_Time'].dt.day\n",
    "night['month'] = night['Date_Time'].dt.month\n",
    "night['year'] = night['Date_Time'].dt.year\n",
    "night = night.groupby(by=\"month\").sum()\n",
    "night.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "id": "26f72662",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"Created a graph to show the usage of washer during day time and night time. As it can be seen on the graph, \n",
    "daytime usage is much more than night time. Only during August and October, difference is less than 50%. So, we \n",
    "can conclude that people prefer to use washer in daytime.\"\"\"\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "months = day['month']\n",
    "x = np.arange(len(months))\n",
    "width = 0.5\n",
    "\n",
    "ax.bar(x, day['Washer [kW]'], width, label='Washer [kW](Day)', color='#0343df')\n",
    "ax.bar(x, night['Washer [kW]'], width, label='Washer [kW](Night)', color='#e50000')\n",
    "\n",
    "ax.set_ylabel('kW')\n",
    "ax.set_title('Washer Usage')\n",
    "ax.set_xticks(x)  \n",
    "ax.set_xticklabels(months.astype(str).values, rotation=0)\n",
    "ax.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "id": "4ef041d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"Created a graph to show the usage of AC during day time and night time. As it can be seen on the graph, \n",
    "nigth time usage is generally more than daytime. Only during September, daytime usage exceeds night. We can also \n",
    "see AC only used in those five months and maximum usage is seen in July. So overall we \n",
    "can conclude that people prefer to use AC in night time.\"\"\"\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "months = day['month']\n",
    "x = np.arange(len(months))\n",
    "width = 0.5\n",
    "\n",
    "ax.bar(x - .5*width, day[\"AC [kW]\"], width, label='AC [kW](Day)', color='#ffff14')\n",
    "ax.bar(x + .5*width, night['AC [kW]'], width, label='AC [kW](Night)', color='#929591')\n",
    "\n",
    "ax.set_ylabel('kW')\n",
    "ax.set_title('AC Usage')\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(months.astype(str).values, rotation=0)\n",
    "ax.legend()\n",
    "\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
